.. include:: ../LINKS.rst

getting buy-in for your processes
开始支持您的流程
==========================================

到目前为止，我们已经讨论了许多简单而有效的构建流程的最佳做法。
我们已经讨论了简单化，透明化，避免官僚主义，评估需求等。但是只有流程还是没有任何意义的，除非您的社区（一）知道这些流程，（二）理解这些流程，（三）并且使用这些流程。

本章的开头，我们把流程比作机器：如何把设备设计的更加容易。我们注意到，对于我们的流程我们应使用同样的逻辑。超越流程的发展阶段（类似于设备），我们可以继续我们的比喻，使之同样适用于它的包装及分销。我们怎样才能使我们的流程更容易理解，发现，尽可能的使用？

文档化
-----------------------------

在您的社区工作流程中的第一步就是要确保它是文档化的。这里的目标是效率。当然，任何人都可以写一个详细清单描述流程是如何工作的，但谁愿意去读大段大段的文字？流程背后的文档应尽可能接近的烹饪配方：先做什么，再做什么，得到怎样的结果。
这里强调的是快速，清晰，抓住重点。

流程基本上是实现一个目标的一系列步骤的集合。文档化就像是宜家的货架的指示牌。你怎么才能尽可能地轻松，有效地告诉用户结果呢？

宜家是这么做的，它仅仅使用图片，大概是为了避免翻译成多国语言。虽然我会建议大多数社区使用文本文档来记录社区流程，但宜家模式是浑然天成的，并有助于减少混乱，标集你的注意力。

为了帮助您开始，让我们先通过内省，并文档化你的流程协作步骤：

1.首先，写下你的流程的最终目标。它实现了什么？

2.现在，用数字和时间顺序，用一个词来描述，写下流程中的每一个步骤。

3.最后，把每个词扩展程一个单句，明确解释这一步涉及哪些方面。

作为一个例子，下面可以用来启动一个流程，为一个新的开发项目贡献的补丁程序：

目标：实现贡献者进入FooBar项目。
过程：生成一个新的功能或bug修复补丁，适用于最新的开发版本的代码。

提交：发送补丁到FooBar项目的邮件列表，概述它做了什么。

等待：等待补丁的反馈，如果需要，进行调整。否则，将提交补丁。

重复：重复上述步骤，直到开发者认为您的贡献足以为您提供直接访问仓库的权限。

使用这种方法时，反复的重读每一步，并评估，以使之易于理解。写的是否简明扼要？是否使用太多的术语？是否适合作为elevator pitch？

使他们很容易找到
-------------------------
当没有人知道它们的存在时，流程毫无意义。此外，为确保您的流程写清楚，你应该努力确保他们易于被发现。我们的目标是确保社区成员可以轻松地找到我们的记录过程。
一般，可以分为两步走：

1。您需要把您的文档放到网上，以便人们可以参考。

2。您需要在文档时被修订时及时通知您的社区。

第一步是把你的流程放到可以访问的地方。如果可以的话，你应该把它与我们在本书前面所讨论的战略文件的其余部分放到一起。

但是易于被发现是这里的关键。

作为一个例子，如果你有一个流程，新的贡献者用来获得版本库访问权限，
你应该确保新的贡献者可以找到它。这种文件不应该被掩埋在wiki的某处。您应评估您的潜在贡献者的会访问哪里阅读相关文档，他们在哪里很可能会去寻找你的流程。同样，大量的反馈，可以确保您做出最佳的决定。

LINKING  FOREVER

当把流程做程在线文档时，你应该确保它的位置轻易不要改变。

它的位置的链接将被广泛引用，特别是在网上社区。

如果您需要移动您的文档，你应该确保旧的链接能够重定向到新的文档。即使您移动了您的文档，您的文档中引用的完整性也是你应该始终努力保持的。

下一步是向您的社区宣布新的流程文档。早在这本书中，我们讨论了你的社区内的沟通渠道，你应该使用这些渠道宣布您的这一文件，并鼓励社区使用它。
