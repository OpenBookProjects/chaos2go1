.. include:: ../LINKS.rst

.. epigraph::

    “We must all hang together, or assuredly, we shall all hang
separately.”

    我们都必须团结在一起，否则，我们都会被分别绞死.

    -- 本杰明.富兰克林 (Benjamin Franklin)



**我最好的朋友叫斯图尔特(Stuart L Angridge),我叫他“AQ”。**
(他是个在线玄幻作家社区的成员,在那里的绰号是“宝瓶座”,
每次他解释为啥选择叫这个时候,总会让我为之大惊失色)

我第一次见他是在英国中部的一个叫伍尔弗汉普顿(Wolverhampton)的地方，
我正是在那里上了大学。我俩很快就成为了朋友。

开始我就对Neil管理的那个Linux用户组很感兴趣,
并且我也渴望有属于自己的用户组，
当然的命名为伍尔弗汉普顿(Wolverhampton)Linux用户组.
六个月之后，在我们一次会议期间，AQ溜达了进来，并开始他标志性的夸夸其谈。



之后的日子里，AQ和我经常一边吃饭一边讨论甚至是辩论各种关于自由软件的话题.
我们不会遗漏任何的主题，并且我们非常欣赏彼此的那种热忱.
更加非常喜欢证明对方是错误的时刻.

这些讨论引出了很多的项目，而其中一个就是LugRadio.


AQ和我在整个LugRadio项目过程中，
一直在争论(或更具体地说,是我)该怎么来录制这些节目.
作为LugRadio的四人节目组里的驻场乐师,
我负责录音以及剪辑，用的是Mac OS X以及Cubase音频制作系统.

是的，伙计，你没看错:
LugRadio上都是关于自由软件的节目,
但却是用商业操作系统和商业软件录制的.
社区每天都有人来谴责我这种“憎恨自由”的做法.
今天来看我真的很幸运.
可惜我并不想把我的一生投入到如何在Linux中进行音频处理的高深学科上.
我爱玩音乐，而不是花时间想我的软件界面该默认设置为多大.
但我不想花时间来研究该在软件中设置多大的取样率这种问题.

类似争论一直持续着，令人不胜其烦，我想是该改变点什么了.

那天晚上在AQ家，我们照例边喝茶边争论.
我和这位古怪朋友忽然对交互式设计产生了浓厚的兴趣::

    如何让产品和界面简单些。然后谈到了Linux录音软件。

说着说着，我们又说到Linux系统下如何进行音频录制的问题.


我们的争论更像是在深化我们彼此一致的认知.
我们找到了很多糟糕的界面设计例子::

    要连续回答一大堆问题的交互方式，复杂的假设逻辑，还有别的一些可笑的东西.

我提出的方案是推倒重来.
假如能彻底重构Linux系统下音频录制的方式，那将是件很有趣事.
并且我们真的这么做了,
我们就拿着纸和笔坐下来，喝着茶，一直聊这个话题，到凌晨四点我才回家睡觉.
我的电脑包里有三张纸，记录着音频录制的全新方法.

尽管经历了如此漫长的头脑风暴的时间，
但是,我依然还是没有时间也没有相关的知识，去写那样一个音频录制的工具。
当然,我可以尝试以当时自己的那么一丁点音频编辑以及开发的水准去进行一次注定拙劣的尝试,

尽管缺乏时间和能力，
但是我不想让我们的想法就此被抛弃.
于是我就画了个软件的效果图,并写了长篇博客解释来介绍我的想法.
文章发到了LugRadio社区里，
一各既往的沉默：我们的设计没人留意.

几个星期之后，我再到LugRadio的论坛时，
发现居然有人写了一些代码发到网上。我下载打开，看到的正是我的草稿里那个界面。


我惊呆了。

然后AQ也惊呆了。

作者是叫贾森弗里德(Jason Fiel)相当不错的家伙，热衷于编程和Linux操作系统。
我立即通过电子邮件联系他。
他的原型代码启发了我考虑项目的下一步，
于是问及我们的设计是否真的可行,他说,可以的.


LugRadio社区成员知道这个故事后也开始对这个新的音频编辑软件感兴趣了:
    他们就给它取了一个名字:JonoEdit.
    我心里美滋滋的，虽然有些不好意思。

是时候开始动工了.
于是,我们建立了一个代码库，一个网站，一个邮件列表，还有一个bug跟踪系统，安排了定期会议。
我们还组织编程日以及“除虫”派对,
当然还有在线讨论,
规划和确定主要架构.
更多新人陆续加入团队，包括Laszlo Pandy，他后来成为该项目负责人。


开发了一段时间后，该项目做了一次更名::

    我不再喜欢“JonoEdit”这名字,
    问大家有何意见,帕克斯史蒂夫(Steve Parkes)--早期LugRadio播音员之一--
    建议用Jokosher。


这个名字由“Jo”以及“Kosher”组成，而“kosher“意思就是”没有培根“（no bacon）
源自“Jo”和“Kosher犹太”，他说里面没有我的姓Bacon.
二者加起来就是我的名字.
我再次感到受宠若惊.
新名字很怪，但团队喜欢，所以我们就启用了新名字.




每个人都很努力。我们整夜写代码，调试，修复错误，并编写文档。
一点点地，我们不仅建立了一个应用程序，还有一个社区。
我们能够感到一种整体意识，并且慢慢的成为一个团队.

最终，经过几个月的工作，我们发布了第一个版本。
正是从我这样业余的设计草图出发，
我们创造出了现在这个可以真正拿来用的工具.

今天,虽然我已经不再参与该项目,
但Jokosher始终在蓬勃发展着.

大多数自由软件项目都起源于某个程序员要解决自己的某个问题.
于是他们写出代码解决问题,并公开发布出来，
如果恰好也能满足其他人的需求，合作就开始了。

Jokosher则不同。它先于软件完全存在于纸面上。
这个新的应用程序植根于交互设计的新思路，设计图以及设计文档，才是程序员得以编写程序的基础.


过程中得到的经验虽然是偶然发生的，但是它告诉我：

社区的成长速度以及成败与否，直接取决于社区战略、结构以及规划。
哪怕是一堆简单的草图也能够启发程序员朝着正确的方向去进行开发。
那些纯粹是因为偶然事件而出现的社区则往往发展很慢，也很难成形。
而那些有组织的社区之所以得到发展，是因为
组织提供了一种价值归属，信念和监督。

有了战略目标,才能社区把事情做成.


